[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ucs"
version = "0.1.0"
description = "Urban Climate Segmentation Model"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
    { name = "Nave Cohen", email = "navecohen81@gmail.com" },
    { name = "Erik Pinhasov", email = "erik944@gmail.com" }
]
keywords = ["urban climate", "segmentation", "deep learning", "image analysis"]
dependencies = [
    "albumentations==2.0.1",
    "datasets==3.0.0",
    "matplotlib==3.9.2",
    "pytorch-lightning==2.4.0",
    "scikit-learn==1.5.2",
    "torch==2.4.1",
    "torchmetrics==1.4.2",
    "tqdm==4.66.5",
    "transformers==4.44.2",
    "tensorboardX==2.6.2.2",
    "pydantic== 2.9.2"
]


[project.urls]
Homepage = "https://github.com/MMA-org/ML-Microclimate-Analysis"
Documentation = "https://mma-org.github.io/ML-Microclimate-Analysis/" 
[project.scripts]
landcover-model = "ucs.main:main"
ucs = "ucs.main:main"


[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["ucs*"]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "black",
    "pytest",
    "pytest-mock",
    "coverage",
    "pytest-cov",
    "isort",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme",
    "myst-parser",
    "sphinx-copybutton",
    "furo",
]

[tool.coverage.run]
source = ["ucs"]
omit = ["ucs/main.py", "ucs/model/evaluate.py", "ucs/model/train.py"]

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = ["ignore::UserWarning"]
addopts = "--cov=ucs --cov-report=term-missing --cov-report=xml"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310']
skip-string-normalization = true  # Avoids changing " to '

[tool.isort]
profile = "black"  # Match isort formatting with Black
multi_line_output = 3
force_grid_wrap = 0
include_trailing_comma = true
line_length = 88
combine_as_imports = true  # Merge "import x as y" imports into one line

[tool.pylint.main]
# Ignore common directories (virtual environments, cache, results)
ignore = ["venv", "logs", "__pycache__", "results", "migrations", "tests"]

# Use multiple cores to speed up Pylint
jobs = 4

# Keep track of previous runs (faster incremental linting)
persistent = true

load-plugins = ["pylint.extensions.no_self_use"]


[tool.pylint.format]
# Maximum allowed line length (PEP 8 suggests 79, but 100-120 is common)
max-line-length = 88

# Indentation style (default: 4 spaces)
indent-string = "    "

[tool.pylint.messages_control]
# Disable warnings that are too strict or irrelevant
disable = [
    "missing-docstring",  # Don't force docstrings on every function/class
    "too-few-public-methods",  # Avoid warning for simple classes
    "invalid-name",  # Allow short variable names (e.g., x, y in ML)
    "import-error",  # Ignore unresolved imports (useful for dynamic modules)
    "no-member",  # Avoid false positives for dynamically generated attributes
    "line-too-long",  # Handled by max-line-length
    "logging-fstring-interpolation",  # Allow f-strings in logging
    "unused-argument",  # Placeholder args in function signatures
    "fixme",  # Allow TODO comments in research projects
    "wrong-import-order",  # Don't enforce strict import order
    "no-self-use",  # Useful for class methods in frameworks like Flask, FastAPI
    "duplicate-code",  # Disable code duplication warnings
    "import-outside-toplevel",
    "too-many-positional-arguments",
    "arguments-differ",
]

[tool.pylint.reports]
# Disable the overall rating
score = false

[tool.pylint.basic]
# Allow common short variable names (useful for ML & data science)
good-names = ["x", "y", "w", "h", "df", "img", "data", "loss", "acc", "lr"]

# Enforce snake_case for functions & PascalCase for classes
function-rgx = "^[a-z_][a-z0-9_]*$"
class-rgx = "^[A-Z][a-zA-Z0-9]+$"

[tool.pylint.design]
# Allow more arguments in ML models (optimizers, loss functions, etc.)
max-args = 7
# Allow larger functions (training loops, data processing)
max-locals = 50
max-branches = 20

[tool.pylint.imports]
# Recognize common third-party libraries to prevent false positives
known-third-party = ["torch", "torchvision", "albumentations", "numpy", "pandas", "matplotlib", "seaborn", "tqdm", "PIL", "datasets", "transformers", "lightning"]

[tool.pylint.typecheck]
# Ignore type errors in these modules (useful for dynamically created attributes)
ignored-modules = ["torch", "torchvision", "albumentations", "transformers"]

[tool.pylint.logging]
# Allow f-strings in logging
logging-modules = ["logging"]
